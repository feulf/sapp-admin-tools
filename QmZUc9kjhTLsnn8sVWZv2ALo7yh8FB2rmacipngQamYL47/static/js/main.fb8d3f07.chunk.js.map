{"version":3,"sources":["utils/safe.tsx","utils/repositories/interfaceRepository.ts","utils/services.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["State","sdk","info","this","initSdk","onUpdate","addListeners","onSafeInfo","console","log","removeListeners","txs","sendTransactions","undefined","Error","connectSafe","InterfaceRepository","safe","address","host","getSafeInfo","network","apiUrl","axios","get","contractInfo","data","status","message","result","abi","JSON","parse","methods","filter","e","constant","map","m","inputs","name","payable","SafeBasedServices","_safe","_web3","_interfaceRepo","Web3","providers","HttpProvider","InterfaceRepo","buildServices","useStyles","makeStyles","theme","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Dashboard","services","classes","React","useState","selectedMethodIndex","setSelectedMethodIndex","target","setTarget","contract","setContract","inputCache","setInputCache","transactions","setTransactions","handleAddress","useCallback","a","interfaceRepo","loadAbi","error","handleMethod","methodIndex","length","handleInput","inputIndex","input","slice","addTransaction","method","web3","cleanInputs","description","i","cleanValue","type","eth","encodeFunctionCall","push","raw","to","value","deleteTransaction","newTxs","splice","d","ExpansionPanel","ExpansionPanelSummary","expandIcon","Box","display","flexDirection","alignItems","justifyContent","width","Button","variant","color","onClick","Typography","className","ExpansionPanelDetails","tx","index","TextField","style","marginTop","label","onChange","Select","MenuItem","App","connected","setConnected","useEffect","activate","isConnected","deactivate","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fb8d3f07.chunk.js","sourcesContent":["\nimport initSdk, { SafeListeners, SafeInfo } from '@gnosis.pm/safe-apps-sdk'\n\nexport interface Safe {\n    activate(onSafeInfo: (info: SafeInfo) => void): void\n    deactivate(): void\n    sendTransactions(txs: any[]): void\n    isConnected(): boolean\n    getSafeInfo(): SafeInfo\n}\n\nclass State implements Safe {\n    sdk: {\n        addListeners: ({ ...allListeners }: SafeListeners) => void,\n        removeListeners: () => void,\n        sendTransactions: (txs: any[]) => void;\n    }\n\n    info: SafeInfo | undefined\n\n    constructor() {\n        this.sdk = initSdk([/.*localhost.*/])\n    }\n\n    activate(\n        onUpdate: (update: any) => void\n    ) {\n        const onSafeInfo = (info: SafeInfo) => {\n            this.info = info\n            console.log({info})\n            onUpdate({})\n        }\n        this.sdk.addListeners({ onSafeInfo })\n    }\n\n    deactivate() {\n        this.sdk.removeListeners()\n    }\n\n    sendTransactions(txs: any[]) {\n        this.sdk.sendTransactions(txs)\n    }\n\n    isConnected(): boolean {\n        return this.info !== undefined\n    }\n    \n    getSafeInfo(): SafeInfo {\n        const info = this.info\n        if (info === undefined) throw Error(\"Not connected to a Safe\")\n        return info\n    }\n}\n\nconst connectSafe = (): Safe => {\n    return new State()\n}\n\nexport default connectSafe","import axios from 'axios'\nimport { Safe } from '../safe'\n\nexport interface ContractMethod {\n    inputs: any[]\n    name: string,\n    payable: boolean\n}\n\nexport interface ContractInterface {\n    methods: ContractMethod[]\n}\n\nclass InterfaceRepository {\n    safe: Safe\n    constructor(safe: Safe) {\n        this.safe = safe\n    }\n\n    async loadAbi(address: string): Promise<ContractInterface> {\n        const host = this.safe.getSafeInfo().network === \"rinkeby\" ? \"https://api-rinkeby.etherscan.io\" : \"https://api.etherscan.io\"\n        const apiUrl = `${host}/api?module=contract&action=getabi&address=${address}`\n        const contractInfo = await axios.get(apiUrl)\n        if (contractInfo.data.status !== \"1\") throw Error(`Request not successfull: ${contractInfo.data.message}; ${contractInfo.data.result}`)\n        const abi = JSON.parse(contractInfo.data.result)\n        console.log(abi)\n        const methods = abi\n            .filter((e: any) => e.constant == false)\n            .map((m: any) => { return { inputs: m.inputs, name: m.name, payable: m.payable || false } })\n        return { methods }\n    }\n}\n\nexport default InterfaceRepository","import Web3 from \"web3\"\nimport InterfaceRepo from \"./repositories/interfaceRepository\"\nimport { Safe } from \"./safe\"\n\nexport interface Services {\n    web3(): any\n    interfaceRepo(): InterfaceRepo\n}\n\nclass SafeBasedServices implements Services {\n    _safe: Safe\n    _web3: any | undefined\n    _interfaceRepo: InterfaceRepo | undefined\n    constructor(safe: Safe) {\n        this._safe = safe\n    }\n    \n    web3() { \n        if (!this._web3) {\n            console.log(this._safe.getSafeInfo().network)\n            this._web3 = new Web3(new Web3.providers.HttpProvider(`https://${this._safe.getSafeInfo().network}.infura.io/v3/8c45ecc4f2e944c7866d974d6dcd52c9`))\n        }\n        return this._web3\n    }\n    interfaceRepo() { \n        if (!this._interfaceRepo) {\n            this._interfaceRepo = new InterfaceRepo(this._safe) \n        }\n        return this._interfaceRepo\n    }\n}\n\nconst buildServices = (safe: Safe): Services => {\n    return new SafeBasedServices(safe)\n}\n\nexport default buildServices","import React from 'react';\nimport { Safe } from '../utils/safe';\nimport TextField from '@material-ui/core/TextField';\nimport { Services } from '../utils/services';\nimport { ContractInterface } from '../utils/repositories/interfaceRepository';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\ninterface ProposedTransaction {\n    description: string\n    raw: any\n}\ninterface Props {\n    safe: Safe,\n    services: Services\n}\nconst Dashboard: React.FC<Props> = ({ safe, services }) => {\n    const classes = useStyles();\n    const [selectedMethodIndex, setSelectedMethodIndex] = React.useState<number>(0);\n    const [target, setTarget] = React.useState<string | undefined>(undefined);\n    const [contract, setContract] = React.useState<ContractInterface | undefined>(undefined);\n    const [inputCache, setInputCache] = React.useState<string[]>([]);\n    const [transactions, setTransactions] = React.useState<ProposedTransaction[]>([]);\n    const handleAddress = React.useCallback(async (address: string) => {\n        setTarget(address)\n        try {\n            const contract = await services.interfaceRepo().loadAbi(address)\n            console.log(contract)\n            setContract(contract)\n        } catch (e) {\n            console.error(e)\n        }\n    }, [services])\n\n    const handleMethod = React.useCallback(async (methodIndex: number) => {\n        if (!contract || contract.methods.length <= methodIndex) return\n        setSelectedMethodIndex(methodIndex)\n        console.log(contract.methods[methodIndex])\n    }, [contract])\n\n    const handleInput = React.useCallback(async (inputIndex: number, input: string) => {\n        inputCache[inputIndex] = input\n        setInputCache(inputCache.slice())\n    }, [inputCache])\n\n    const addTransaction = React.useCallback(async () => {\n        if (!contract || contract.methods.length <= selectedMethodIndex) return\n        const method = contract.methods[selectedMethodIndex]\n        const web3 = services.web3()\n        const cleanInputs = []\n        let description = method.name + \" (\"\n        for (let i = 0; i < method.inputs.length; i++) {\n            const cleanValue = inputCache[i] || \"\"\n            cleanInputs[i] = cleanValue\n            if (i > 0) description += \", \"\n            const input = method.inputs[i]\n            description += (input.name || input.type) + \": \" + cleanValue\n        }\n        description += \")\"\n        try {\n            const data = web3.eth.abi.encodeFunctionCall(method, cleanInputs)\n            transactions.push({ description, raw: {to: target, value: 0, data}})\n            setInputCache([])\n            setTransactions(transactions)\n            setSelectedMethodIndex(0)\n        } catch(e) {\n            console.error(e)\n        }\n    }, [services, transactions, target, contract, selectedMethodIndex, inputCache])\n\n    const deleteTransaction = React.useCallback(async (inputIndex: number) => {\n        const newTxs = transactions.slice()\n        newTxs.splice(inputIndex, 1)\n        setTransactions(newTxs)\n    }, [transactions])\n    \n    const sendTransactions = React.useCallback(async () => {\n        if (transactions.length == 0) return\n        try {\n            safe.sendTransactions(transactions.map((d) => d.raw))\n            setInputCache([])\n            setTransactions([])\n            setSelectedMethodIndex(0)\n        } catch(e) {\n            console.error(e)\n        }\n    }, [safe, transactions])\n    return <>\n        <ExpansionPanel>\n            <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            >\n                <Box display=\"flex\" flexDirection=\"row-reverse\" alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => sendTransactions() }>Send</Button>\n                    <Typography className={classes.heading}>{transactions.length} Transaction(s)</Typography>\n                </Box>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Box  flexDirection=\"column\" width=\"100%\">\n                    {transactions.map((tx, index) => (\n                        <Box display=\"flex\" flexDirection=\"row-reverse\" alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n                            <Button variant=\"contained\" color=\"secondary\" onClick={() => deleteTransaction(index) }>Delete</Button>\n                            <Typography>{tx.description}</Typography>\n                        </Box>\n                    ))}\n                </Box>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <TextField \n            style={{ marginTop: 10 }}\n            value={target} \n            label=\"Target\" \n            variant=\"outlined\" \n            onChange={(e) => handleAddress(e.target.value)} />\n\n        {(!target || !contract) ? <></> : \n        <>\n            <Select\n                style={{ marginTop: 10 }}\n                value={selectedMethodIndex}\n                onChange={(e) => { handleMethod(e.target.value as number) }}\n            >\n                {contract.methods.map((method, index) => (\n                    <MenuItem value={index}>{method.name}</MenuItem>\n                ))}\n            </Select>\n            {\n            contract.methods.length > selectedMethodIndex ? \n                contract.methods[selectedMethodIndex].inputs.map((input, index) => (\n                    <TextField \n                        style={{ marginTop: 10 }}\n                        value={inputCache[index] || \"\"} \n                        label={`${input.name || \"\"}(${input.type})`} \n                        onChange={(e) => handleInput(index, e.target.value)} />\n                )) : \n                <></> \n            }\n            <Button \n                style={{ marginTop: 10 }}\n                variant=\"contained\" color=\"primary\"\n                onClick={() => addTransaction() }>\n                    Add transaction\n            </Button>\n        </>\n        }\n    </>\n}\n  \n  export default Dashboard;","import CircularProgress from '@material-ui/core/CircularProgress'\nimport React, { useState, useEffect } from 'react'\nimport connectSafe from './utils/safe'\nimport buildServices from './utils/services'\nimport logo from './logo.svg'\nimport './App.css'\nimport Dashboard from './components/Dashboard'\n\nconst App = () => {\n  const [safe] = useState(connectSafe());\n  const [services] = useState(buildServices(safe));\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    safe.activate(() => {\n      setConnected(safe.isConnected())\n    })\n  \n    return () => safe.deactivate();\n  }, [safe]);\n  return (\n    <div className=\"App\">\n      {(connected ? <Dashboard safe={safe} services={services} /> : \n        <>\n          Loading...<br />\n          <CircularProgress />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}